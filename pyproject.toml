[tool.poetry]
name = "cursor_dev"
version = "0.1.0"
description = "Cursor 開発環境"
authors = ["AI Developer <dev@example.com>"]
package-mode = false

[tool.poetry.dependencies]
python = ">=3.10,<=3.13"
aiohttp = "^3.9.1"
beautifulsoup4 = "*"
numpy = "*"
matplotlib = "*"
python-dotenv = "*"
requests = "*"
ipykernel = "*"
fastapi = "*"
uvicorn = "*"
httpx = "*"
pydantic = "*"
python-multipart = "*"
starlette = "*"
a2a-sdk = "*"
claude-code-sdk = "^0.0.14"
langgraph = "^0.5.3"
langchain-openai = "^0.3.28"
langchain-google-genai = "^2.1.8"
langchain-tavily = "^0.2.10"
langchain-experimental = "^0.3.4"
mcp = "^1.12.4"
fastmcp = "^2.11.2"
chainlit = "^2.6.9"
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
aiosqlite = "^0.21.0"
asyncpg = "^0.30.0"
psycopg2 = "^2.9.10"
gradio = "^5.42.0"
markdown-it-py = "^4.0.0"
gunicorn = {extras = ["uvicorn"], version = "^23.0.0"}
sqlalchemy = "^2.0"

[tool.poetry.group.dev.dependencies]
pytest = "*"
pytest-cov = "*"
pytest-mock = "*"
black = "*"
flake8 = "*"
isort = "*"
pytest-asyncio = "*"
mypy = "*"
pytest-benchmark = "*"
memory-profiler = "*"
psutil = "*"
ruff = "*"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 79
target-version = ['py310']
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.pytest_cache
  | htmlcov
  | output
  | backup
  | docs
  | memory-bank
  | templates
  | examples
)/
'''

[tool.isort]
profile = "black"
line_length = 79
multi_line_output = 3
skip = ["backup", "docs", "memory-bank", "templates", "examples", "output"]

[tool.flake8]
max-line-length = 88
max-complexity = 10
ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    ".pytest_cache",
    "backup",
    "output"
]

[tool.ruff]
line-length = 88
target-version = "py312"

[tool.ruff.lint]
# Enable common rulesets: pycodestyle (E/W), Pyflakes (F), isort (I), bugbear (B), pyupgrade (UP)
select = ["E", "W", "F", "I", "B", "UP"]
ignore = []

[tool.ruff.lint.isort]
known-first-party = ["app"]
combine-as-imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
pythonpath = ["."]
markers = [
    "unit: 単体テスト（高速・独立）",
    "integration: 統合テスト（中速・依存あり）",
    "e2e: E2Eテスト（低速・完全シナリオ）",
    "slow: 実行時間の長いテスト",
    "security: セキュリティ関連テスト",
    "asyncio: mark the test as a coroutine, it will be run using an asyncio event loop",
    "timeout: mark a test as having a timeout (seconds)",
    "performance: パフォーマンステスト（ベンチマーク・プロファイリング）",
]
addopts = [
    "-v",
    "--strict-markers",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html:output/coverage/html",
    "--cov-report=json:output/coverage/coverage.json",
    "--cov-report=xml:output/coverage/coverage.xml",
    "--cov-fail-under=85",
]
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
    "ignore:cannot collect test class .*TestBaseA2AAgent.* because it has a __init__ constructor:pytest.PytestCollectionWarning",
    "ignore::RuntimeWarning:app.query_monitor",
    "ignore::pytest.PytestUnraisableExceptionWarning",
    "ignore::ResourceWarning",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    # Gradio コンポーネントとの直接インタフェース（UI構築・マウント）は
    # ヘッドレス実行時に外部ライブラリの未クローズ警告を誘発しがちで、
    # 実運用検証はE2E/UIテスト領域で担保する方針のため、単体カバレッジからは除外する。
    "app/app_factory.py",
    # UI 構築・イベント配線レイヤは単体テスト対象外
    "app/ui/*",
    "app/ui/**",
    # デモ/実験用スクリプトはカバレッジ対象外
    "app/demo.py",
    "app/ex.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

